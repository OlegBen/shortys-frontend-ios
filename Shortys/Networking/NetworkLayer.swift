//
//  NetworkLayer.swift
//  Shortys
//
//  Created by user on 22.12.2021.
//

import Foundation
import Alamofire

// MARK: NetworkLayer
final class NetworkLayer: NetworkLayerProtocol, BaseAPI {
    /// –î–æ–º–µ–Ω, –Ω–∞—á–∞–ª–æ —Å—Å—ã–ª–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
    internal var host: String {
        get {
            return NetworkConstants.host
        }
    }
    var session: Session
    
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    /// - Parameter session: Session
    init(session: Session) {
        self.session = session
    }
    
    /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    /// - Returns: –ì–æ—Ç–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    internal func makeUnAuthHeaders() -> HTTPHeaders {
        var headers:[HTTPHeader] = [HTTPHeader]()
        headers.append(HTTPHeader(name: NetworkConstants.contentType, value: NetworkConstants.appJson))
        return HTTPHeaders(headers)
    }
    
    /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    /// - Returns: –ì–æ—Ç–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    internal func makeAuthHeaders() -> HTTPHeaders {
        var headers = makeUnAuthHeaders()
        headers.add(HTTPHeader(name: NetworkConstants.authorization, value: NetworkConstants.token))
        return headers
    }
    
    func mergeHeaders(headers: HTTPHeaders, authType: AuthType) -> HTTPHeaders {
        switch authType {
        case .noAuth:
            var modHeaders = makeUnAuthHeaders()
            for header in headers {
                modHeaders.add(header)
            }
            return modHeaders
        case .auth:
            var modHeaders = makeAuthHeaders()
            for header in headers {
                modHeaders.add(header)
            }
            return modHeaders
        }
    }
    
    //MARK: Requests
    /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞
    func requestData<T: Codable>(_ classToReturn: T.Type, authType: AuthType, endpoint: Endpoint, method: HTTPMethod, params: Parameters?, headers: HTTPHeaders, encoding: ParameterEncoding = JSONEncoding.default, completion: @escaping ((T?, ErrorResponse?) -> Void)) {
        let headers = self.mergeHeaders(headers: headers, authType: authType)
        let host = self.host
        self.requestData(url: host + endpoint.rawValue, method: method, params: params, headers: headers, encoding: encoding, completion: completion)
    }

    func requestData<T: Codable>(_ classToReturn: T.Type, authType: AuthType, endpoint: Endpoint, method: HTTPMethod, params: Parameters?, headers: HTTPHeaders, encoding: ParameterEncoding = JSONEncoding.default, completion: @escaping ((T?, ErrorResponse?, [String: Any]) -> Void)) {
        let headers = self.mergeHeaders(headers: headers, authType: authType)
        requestData(url: host + endpoint.rawValue, method: method, params: params, headers: headers,  encoding: encoding, completion: completion)
    }
    
    func requestWithQuery<T: Codable>(_ classToReturn: T.Type, authType: AuthType, endpoint: Endpoint, method: HTTPMethod, params: Parameters?,headers: HTTPHeaders, encoding: ParameterEncoding = URLEncoding(destination: .queryString), completion: @escaping ((T?, ErrorResponse?, [String: Any]) -> Void)) {
        let headers = self.mergeHeaders(headers: headers, authType: authType)
        requestWithQuery(url: host + endpoint.rawValue, method: method, params: params, headers: headers,  encoding: encoding, completion: completion)
    }
    
    /// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    /// - Parameter url: URL-—Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    /// - Parameter method: –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ (GET, POST –∏ —Ç.–¥.)
    /// - Parameter params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    /// - Parameter headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, —Å–ª–æ–≤–∞—Ä—å [String: String]
    /// - Parameter completion: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    func requestData<T: Codable>(url: String, method: HTTPMethod = .get, params: Parameters? = nil, headers: HTTPHeaders, encoding: ParameterEncoding, completion: @escaping ((T?, ErrorResponse?)->Void)) {
        print("ü™êü™êü™ê", method.rawValue, url)
        print("Headers: \n", headers)
        print("Params: \n", params)
        self.session.request(url, method: method, parameters: params, encoding: encoding, headers: headers).response(queue: .global(qos: .background)) { [weak self] (response) in
            guard let _self = self else {
                completion(nil, nil)
                return
            }
            
            guard let data = response.data else {
                let error = ErrorResponse(error: "Oops", errorDescription: "No data in response")
                completion(nil, error)
                return
            }
            
            let results = _self.tryToParseResponse(parseType: T.self, data: data)
            print("Response: \n", results)
            completion(results.0, results.1)
        }
    }
    
    func requestData<T: Codable>(url: String, method: HTTPMethod, params: Parameters?, headers: HTTPHeaders, encoding: ParameterEncoding, completion: @escaping ((T?, ErrorResponse?, [String: Any])->Void)) {
        print("ü™êü™êü™ê", method.rawValue, url)
        print("Headers: \n", headers)
        print("Params: \n", params)
        self.session.request(url, method: method, parameters: params, encoding: encoding, headers: headers).response(queue: .global(qos: .background)) { [weak self] (response) in
            guard let _self = self else {
                completion(nil, nil, [:])
                return
            }
            
            var anyParams: [String: Any] = [:]
            if let headerFields = response.response?.allHeaderFields as? [String: String], let url = response.request?.url {
                let cookies = HTTPCookie.cookies(withResponseHeaderFields: headerFields, for: url)
                anyParams["Cookies"] = cookies
            }
            
            guard let data = response.data else {
                let error = ErrorResponse(error: "Oops", errorDescription: "No data in response")
                completion(nil, error, anyParams)
                return
            }
            
            let results = _self.tryToParseResponse(parseType: T.self, data: data)
            print("Response: \n", results)
            completion(results.0, results.1, anyParams)
            
        }
    }
    
    /// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    /// - Parameter url: URL-—Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    /// - Parameter method: –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ (GET, POST –∏ —Ç.–¥.)
    /// - Parameter params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    /// - Parameter headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, —Å–ª–æ–≤–∞—Ä—å [String: String]
    /// - Parameter completion: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    func requestWithQuery<T: Codable>(url: String, method: HTTPMethod = .get, params: Parameters? = nil, headers: HTTPHeaders, encoding: ParameterEncoding, completion: @escaping ((T?, ErrorResponse?, [String: Any])->Void)) {
        print("ü™êü™êü™ê", method.rawValue, url)
        print("Headers: \n", headers)
        print("Params: \n", params)
        self.session.request(url, method: method, parameters: params, encoding: encoding, headers: headers).response(queue: .global(qos: .background)) { [weak self] (response) in
            guard let _self = self else {
                completion(nil, nil, [:])
                return
            }
            
            var anyParams: [String: Any] = [:]
            if let headerFields = response.response?.allHeaderFields as? [String: String] {
                anyParams = headerFields
            }
            
            guard let data = response.data else {
                let error = ErrorResponse(error: "Oops", errorDescription: "No data in response")
                completion(nil, error, anyParams)
                return
            }
            
            let results = _self.tryToParseResponse(parseType: T.self, data: data)
            print("Response: \n", results)
            completion(results.0, results.1, anyParams)
        }
    }
    
    private func tryToParseResponse<T: Codable>(parseType: T.Type, data: Data) -> (T?, ErrorResponse?) {
        do {
            let responseObject = try JSONDecoder().decode(T.self, from: data)
            return (responseObject, nil)
        } catch {
            do {
                let responseError = try JSONDecoder().decode(ErrorResponse.self, from: data)
                return (nil, responseError)
            } catch {
                let error = ErrorResponse(error: "Wrong type", errorDescription: "Response data has wrong type")
                return (nil, error)
            }
        }
    }
    
    static func getSession() -> Session {
        let manager = Session()
        return manager
    }
    
}

// MARK: TheResponse
fileprivate class TheResponse<T:Codable>: Codable {
    var data: T?
}
